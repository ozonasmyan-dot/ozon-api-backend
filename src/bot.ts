import {Telegraf, Markup, Context} from 'telegraf';
import {BOT_TOKEN} from '@/config';
import {AnalyticsService} from '@/modules/analytics/application/analytics.service';
import {DrrProductDto, DrrResponseDto} from '@/modules/analytics/application/dto/drr.dto';
import dayjs from 'dayjs';

import {UnitService} from '@/modules/unit/application/unit.service';
import {AdvertisingService} from '@/modules/advertising/application/advertising.service';
import container from "@/infrastructure/di/container";

const unitService = container.resolve(UnitService);
const advertisingService = container.resolve(AdvertisingService);
const analyticsService = container.resolve(AnalyticsService);

type AdType =
    | 'PLACEMENT_TOP_PROMOTION'
    | 'CPO'
    | 'PLACEMENT_SEARCH_AND_CATEGORY';

const adsTypes: Record<AdType, string> = {
    'PLACEMENT_TOP_PROMOTION': '–í—ã–≤–æ–¥ –≤ —Ç–æ–ø',
    'CPO': '–û–ø–ª–∞—Ç–∞ –∑–∞ –∑–∞–∫–∞–∑',
    'PLACEMENT_SEARCH_AND_CATEGORY': '–¢—Ä–∞—Ñ–∞—Ä–µ—Ç—ã',
};

const productsSku: Record<string, string> = {
    '2586085325': '–®–∞–ø–∫–∞ –±–µ–∂',
    '2586059276': '–®–∞–ø–∫–∞ —Ö–∞–∫–∏',
    '1763835247': '–®–∞–ø–∫–∞ —á–µ—Ä–Ω–∞—è',
    '1828048543': '–°—É–º–∫–∞ —á–µ—Ä–Ω–∞—è',
    '1828048513': '–°—É–º–∫–∞ —Å–µ—Ä–∞—è',
    '1828048540': '–°—É–º–∫–∞ –±–æ—Ä–¥–æ–≤–∞—è',
};

if (!BOT_TOKEN) {
    throw new Error('BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω');
}

const formatCurrency = (value: number): string =>
    new Intl.NumberFormat('ru-RU', {
        style: 'currency',
        currency: 'RUB',
        maximumFractionDigits: 0,
    }).format(value);

function formatDrrMessage({products, totals}: DrrResponseDto): string {
    let text = 'üìä –û—Ç—á—ë—Ç –ø–æ DRR\n\n';

    products.forEach((p: DrrProductDto) => {
        text += `üëú SKU: ${productsSku[p.sku] ?? p.sku}\n`;
        text += `   ‚Ä¢ –ó–∞–∫–∞–∑—ã: ${p.orders.count} —à—Ç. –Ω–∞ ${formatCurrency(p.orders.money)}\n`;
        text += `   ‚Ä¢ –†–µ–∫–ª–∞–º–∞: ${formatCurrency(p.ads.totals)}\n`;

        p.ads.items.forEach((item) => {
            const label = item.type in adsTypes ? adsTypes[item.type as AdType] : item.type;
            text += `      - ${label}: ${formatCurrency(item.money)}\n`;
        });

        text += `   ‚Ä¢ DRR: ${p.drr}%\n\n`;
    });

    text += `üí° –ò—Ç–æ–≥–æ –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º:\n`;
    text += `   ‚Ä¢ –ó–∞–∫–∞–∑—ã: ${totals.orders.count} —à—Ç. –Ω–∞ ${formatCurrency(totals.orders.money)}\n`;
    text += `   ‚Ä¢ –†–µ–∫–ª–∞–º–∞: ${formatCurrency(totals.ads.totals)}\n`;
    text += `   ‚Ä¢ DRR: ${totals.drr}%`;

    return text;
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç ¬´–∑–∞–≥—Ä—É–∑–∫—É¬ª, –¥–µ—Ä–∂–∏—Ç typing –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–∏.
 * @param ctx Telegraf Context
 * @param work —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
 * @param loadingText –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏
 */
async function withLoading(
    ctx: Context,
    work: () => Promise<string>,
    loadingText = '‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...'
): Promise<void> {
    // –°–æ–æ–±—â–µ–Ω–∏–µ ¬´–∑–∞–≥—Ä—É–∑–∫–∞¬ª
    const loadingMsg = await ctx.reply(loadingText);

    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º "typing", —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const typingTimer = setInterval(() => {
        // –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —á–∞—Ç/—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)
        void ctx.sendChatAction('typing').catch(() => {});
    }, 4000);

    try {
        const text = await work();

        await ctx.telegram.editMessageText(
            ctx.chat!.id,
            loadingMsg.message_id,
            undefined,
            text
        );
    } catch (err) {
        await ctx.telegram.editMessageText(
            ctx.chat!.id,
            loadingMsg.message_id,
            undefined,
            '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö'
        );
        console.error('[withLoading] –û—à–∏–±–∫–∞:', err);
    } finally {
        clearInterval(typingTimer);
    }
}

const bot = new Telegraf(BOT_TOKEN);

const mainKb = Markup.keyboard([
    ['üìä –ü–æ–ª—É—á–∏—Ç—å DRR —Å—É–º–æ–∫'],
    ['üìä –ü–æ–ª—É—á–∏—Ç—å DRR —à–∞–ø–æ–∫'],
    ['üìä –ü–æ–ª—É—á–∏—Ç—å DRR –æ–±—â–∏–π']
]).resize();

bot.start(async (ctx: Context) => {
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:', mainKb);
});

bot.hears('üìä –ü–æ–ª—É—á–∏—Ç—å DRR –æ–±—â–∏–π', async (ctx: Context) => {
    await withLoading(ctx, async () => {
        await Promise.all([
            unitService.sync(),
            advertisingService.sync(),
        ]);

        const result = await analyticsService.getDrr({
            date: dayjs().format('YYYY-MM-DD')
        });

        return formatDrrMessage(result);
    });
});

bot.hears('üìä –ü–æ–ª—É—á–∏—Ç—å DRR —Å—É–º–æ–∫', async (ctx: Context) => {
    await withLoading(ctx, async () => {
        await Promise.all([
            unitService.sync(),
            advertisingService.sync(),
        ]);

        const result = await analyticsService.getDrr({
            date: dayjs().format('YYYY-MM-DD'),
            sku: ['1828048543', '1828048513', '1828048540'],
        });

        return formatDrrMessage(result);
    });
});

bot.hears('üìä –ü–æ–ª—É—á–∏—Ç—å DRR —à–∞–ø–æ–∫', async (ctx: Context) => {
    await withLoading(ctx, async () => {
        await Promise.all([
            unitService.sync(),
            advertisingService.sync(),
        ]);

        const result = await analyticsService.getDrr({
            date: dayjs().format('YYYY-MM-DD'),
            sku: ['2586085325', '2586059276', '1763835247'],
        });

        return formatDrrMessage(result);
    });
});

bot
    .launch()
    .then(() => console.log('Bot started'))
    .catch((err: unknown) => console.error('Bot launch failed', err));

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
