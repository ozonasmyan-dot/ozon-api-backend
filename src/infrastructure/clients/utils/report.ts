import {performanceClient} from '@/infrastructure/clients/ozon/performance';
import {logger} from "@/utils/logger";

const delay = (ms: number) => new Promise(res => setTimeout(res, ms));

/**
 * –û–∂–∏–¥–∞–µ–º, –ø–æ–∫–∞ –æ—Ç—á—ë—Ç —Å—Ç–∞–Ω–µ—Ç –≥–æ—Ç–æ–≤.
 */
const waitForReportReady = async (
    uuid: string,
    attempts = 30,
    interval = 3000,
) => {
    logger.info(`üîé –ñ–¥—ë–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á—ë—Ç–∞ ${uuid} (–º–∞–∫—Å ${attempts} –ø–æ–ø—ã—Ç–æ–∫)‚Ä¶`);

    for (let i = 0; i < attempts; i++) {
        await delay(interval);

        const {data} = await performanceClient.get(`/api/client/statistics/${uuid}`);
        const status = data.state as string;

        logger.info(`‚è≥ –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${attempts}: state = ${status}`);

        if (status === 'OK') {
            logger.info('‚úÖ –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤!');
            return true;
        }
    }

    throw new Error('üõë –û—Ç—á—ë—Ç –Ω–µ –≥–æ—Ç–æ–≤. –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.');
};

/**
 * –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç.
 */
const fetchReport = async (uuid: string) => {
    logger.info(`üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—á—ë—Ç ${uuid}‚Ä¶`);
    const {data} = await performanceClient.get(
        `/api/client/statistics/report`,
        {params: {UUID: uuid}},
    );
    logger.info(`üìä –ü–æ–ª—É—á–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${data}`);

    return data;
};

/**
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á—ë—Ç–∞.
 */
const generateReport = async ({url, params}: {
    url: string;
    params: Record<string, any>;
}): Promise<string> => {
    logger.info(`üöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç –ø–æ ${url}`);
    try {
        const {data} = await performanceClient.post(url, params);
        logger.info(`üÜî UUID –æ—Ç—á—ë—Ç–∞: ${data.UUID}`);
        return data.UUID as string;
    } catch (error: any) {
        const status = error?.response?.status;
        const reqUrl = error?.config?.url;
        const message = error?.response?.data?.error || error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';

        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ [${status}] ${reqUrl}: ${message}`);
        throw error;
    }
};

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç, –∂–¥—ë—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –æ—Ç—á—ë—Ç–∞.
 */
export const fetchApiReportData = async ({url, params}: {
    url: string;
    params: Record<string, any>;
}) => {
    logger.info('================ –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞ ================');

    const uuid = await generateReport({url, params});
    await waitForReportReady(uuid);
    const rows = await fetchReport(uuid);

    logger.info('================ –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω ================');
    return rows;
};
